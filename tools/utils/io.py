
import os, sys

from tools.utils.codegen import eval_kwargs_column


#====================================================================

def read(*args):
    f = open(os.path.join(*args))
    try:
        return f.read()
    finally:
        f.close()


#====================================================================

def read_lines(*args):
    f = open(os.path.join(*args))
    try:
        return filter(None, [l.split('#')[0].strip() for l in f.readlines()])
    finally:
        f.close()


#====================================================================

def read_set(*args):
    return set(read_lines(*args))


#===============================================================================

def read_args_kwargs(dir_, name, argcount, context=None):
    result = []
    for line in read_set(dir_, name):
        _input = line.split(None, argcount)
        result.append((_input[:argcount], eval_kwargs_column(_input[argcount:], context)))
    return result


#===============================================================================
# ugly but helpful

def _ignore_gccxml_settings(f):
    # we only care about reading, not generating
    def g(*args, **kwargs):
        from pygccxml.parser.config import gccxml_configuration_t
        orig = gccxml_configuration_t.raise_on_wrong_settings
        gccxml_configuration_t.raise_on_wrong_settings = lambda _: None
        try:
            return f(*args, **kwargs)
        finally:
            gccxml_configuration_t.raise_on_wrong_settings = orig
    return g

@_ignore_gccxml_settings
def read_gccxml(*args):
    path = os.path.join(*args)
    from pygccxml.parser.config import config_t
    from pygccxml.parser.source_reader import source_reader_t
    return source_reader_t(config_t()).read_xml_file(path)[0]


#==========================================================================

BADGE = (
    'This file was generated by running the following command:',
    '  %s %s' % (sys.executable, ' '.join(sys.argv))
)
ASM_BADGE = '; %s\n; %s\n\n' % BADGE
C_BADGE = '/*\n * %s\n * %s\n */\n\n' % BADGE
GEN_BADGE = '# %s\n# %s\n\n' % BADGE

def _get_badge(name):
    _, ext = os.path.splitext(name)
    return {
        '.asm': ASM_BADGE,
        '.generated': GEN_BADGE,
    }.get(ext, C_BADGE)

def write(dir_, name, text, badge=False):
    f = open(os.path.join(dir_, name), "w")
    try:
        if badge:
            f.write(_get_badge(name))
        f.write(text)
    finally:
        f.close()


#==========================================================================

def _rename(name):
    return name[1:].split('.')[0].upper()

def _read_files(src, files):
    result = {}
    for info in files:
        name, reader = info[:2]
        extra_args = info[2:]
        result[_rename(name)] = reader(src, name, *extra_args)
    return result

def _write_files(dir_, files):
    for (path, text) in files.items():
        write(dir_, path, text, badge=True)

def _change_keys(orig, new_keys):
    return dict((name, orig[key]) for (name, key) in new_keys)

def run_generator(cls, input_info, output_names):
    src, dst = sys.argv[1:]
    inputs = _read_files(src, input_info)
    outputs = cls().run(inputs)
    files = _change_keys(outputs, output_names)
    _write_files(dst, files)


#==========================================================================
