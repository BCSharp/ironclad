# This file is used by tools/generatestub.py

# this file contains C function prototypes for managed functions that need
# to be called from the stub library. It's used to generate a header for 
# inclusion by C code, and in PythonApi generation.

destructor IC_PyBaseObject_Dealloc;
destructor IC_PyList_Dealloc;
destructor IC_PyMethod_Dealloc;
destructor IC_PySlice_Dealloc;
destructor IC_PyTuple_Dealloc;

newfunc IC_PyFloat_New;
newfunc IC_PyInt_New;
newfunc IC_PyType_New;

initproc IC_PyBaseObject_Init;
initproc IC_PyDict_Init;

readbufferproc IC_str_getreadbuffer;
writebufferproc IC_str_getwritebuffer;
segcountproc IC_str_getsegcount;

reprfunc IC_PyString_Str;
binaryfunc IC_PyString_Concat_Core;

# the rest are related to the awful hacks in Objects/fileobject.c

PyObject *IC_file_close(PyFileObject *f);
void IC_file_dealloc(PyFileObject *f);
PyObject *IC_file_flush(PyFileObject *f);
PyObject *IC_file_iternext(PyFileObject *f);
PyObject *IC_file_read(PyFileObject *f, PyObject *args);
PyObject *IC_file_readinto(PyFileObject *f, PyObject *args);
PyObject *IC_file_readline(PyFileObject *f, PyObject *args);
PyObject *IC_file_readlines(PyFileObject *f, PyObject *args);
PyObject *IC_file_seek(PyFileObject *f, PyObject *args);
PyObject *IC_file_tell(PyFileObject *f);
PyObject *IC_file_truncate(PyFileObject *f, PyObject *args);
PyObject *IC_file_write(PyFileObject *f, PyObject *args);
PyObject *IC_file_writelines(PyFileObject *f, PyObject *args);

FILE *IC_PyFile_AsFile(PyObject *f);
int IC_PyFile_SetEncodingAndErrors(PyObject *f, const char *enc, char* errors);
int IC_PyFile_WriteObject(PyObject *v, PyObject *f, int flags);
int IC_PyFile_WriteString(const char *s, PyObject *f);

# TODO: get rid of these - they are dummy stubs to compile python34.dll

PyObject * Py_InitModule4_64(const char *name, PyMethodDef *methods, const char *doc, PyObject *self, int apiver);

PyObject * _PyObject_Str(PyObject *);
int PyObject_Compare(PyObject *, PyObject *);

PyObject * PyNumber_Int(PyObject *o);

PyObject* PyUnicodeUCS2_FromUnicode(const Py_UNICODE *u, Py_ssize_t size);
PyObject* PyUnicodeUCS2_AsEncodedString(PyObject *unicode, const char *encoding, const char *errors);
PyObject* PyUnicodeUCS2_FromObject(register PyObject *obj);
PyObject* _PyUnicodeUCS2_AsDefaultEncodedString(PyObject *, const char *);
PyObject* PyUnicodeUCS2_Concat(PyObject *left, PyObject *right);
PyObject* PyUnicodeUCS2_Decode(const char *s, Py_ssize_t size, const char *encoding, const char *errors);
PyObject* PyUnicodeUCS2_Format(PyObject *format, PyObject *args);
int PyUnicodeUCS2_Resize(PyObject **unicode, Py_ssize_t length);
PyObject* PyUnicodeUCS2_DecodeASCII(const char *string, Py_ssize_t length, const char *errors);
PyObject* PyUnicodeUCS2_AsUnicodeEscapeString(PyObject *unicode);
Py_UNICODE * PyUnicodeUCS2_AsUnicode(PyObject *unicode);
PyObject* PyUnicodeUCS2_FromEncodedObject(register PyObject *obj, const char *encoding, const char *errors);

PyObject * PyString_FromStringAndSize(const char *, Py_ssize_t);
PyObject * PyString_FromString(const char *);
char * PyString_AsString(PyObject *);
Py_ssize_t PyString_Size(PyObject *);
void PyString_Concat(PyObject **, PyObject *);
int _PyString_Resize(PyObject **, Py_ssize_t);
PyObject * PyString_InternFromString(const char *);
void PyString_InternInPlace(PyObject **);

int PyString_AsStringAndSize(register PyObject *obj, register char **s, register Py_ssize_t *len);
int _PyString_InsertThousandsGrouping(char *buffer, Py_ssize_t n_buffer, Py_ssize_t n_digits, Py_ssize_t buf_size, Py_ssize_t *count, int append_zero_char);

PyObject * PyInt_FromString(char*, char**, int);
long PyInt_GetMax(void);
PyObject * PyInt_FromLong(long);
PyObject * PyInt_FromSize_t(size_t);
PyObject * PyInt_FromSsize_t(Py_ssize_t);
long PyInt_AsLong(PyObject *);
Py_ssize_t PyInt_AsSsize_t(PyObject *);
unsigned long PyInt_AsUnsignedLongMask(PyObject *);
