This documentation originally went into an awful lot of unnecessary detail;
from r208 onwards it will just try to cover everything at a high level, and
leave the ever-changing details to those interested enough to read the
source.


Build products

python25.dll

This dll is built from the contents of the stub directory; it's written in C
and a little bit of asm, most of whch is autogenerated; however, several
functions are copied directly from CPython itself. When it's loaded into a
process' address space it impersonates the real python25.dll and redirects
(most) CPython API calls into managed code.

Ironclad.dll

This managed assembly contains "everything else" -- all the logic that isn't
already implemented in the redirection dll.

ironclad.py

Importing this module will install import hooks which allow you to
transparently import CPython extensions; when you've finished with them, you
should call the shutdown function, to prevent ugly crashes on exit.


Interesting Classes

Python25Api

This class is generated from the contents of src/python25api_components. It has
a property for every piece of data in the API and a method for every function,
and maintains mappings from API names to pointers; it also defines the
GetAddress and SetData functions which are passed to the StubReference.

StubReference

Loads the redirection dll (python25.dll) and initialises it, passing function
pointers to GetAddress and SetData. The init function calls these functions
repeatedly, passing in the names of the symbols it exports; once all the data
has been filled in, the redirection should work.

Python25Mapper

This class is big; really, really big. Also ugly. It contains all the
implemented API functions; it's responsible for filling in all the uninitialised
data in the redirection dll; it maintains the 2-way mappings between managed
and unmanaged objects. It also holds a whole load of useful logic and data for
managing things like imports and errors; it should certainly be split up into
several smaller classes, but the dividing lines remain unclear.

Some parts of this file are also generated from src/python25mapper_components;
specifically, mappings for exception types, and the StoreDispatch method which
redirects calls to public Store(object obj) to private Store(actual-type-of-obj
obj).

InterestingPtrMap

Stores the various kinds of managed and unmanaged data, and is responsible for
managing the lifetimes of 'bridge' objects (basically, any object whose 
unmanaged representation contains important state; specifically, objects with
unmanaged types and PyCObjects). It does this by reading the ob_refcnt field
and maintaining either weak or strong references to the objects; if ob_refcnt
is greater than one, then some unmanaged code has a reference to the object and
we need to keep the managed object alive by keeping a strong reference to it in
the map. However, if ob_refcnt is one, the managed representation owns the only
reference to the unmanaged representation, and we can allow normal managed
garbage collection to take its course and destroy both representations at its
leisure.

Dispatcher

This is an IronPython class which uses the Python25Mapper to translate
IronPython calls to CPython calls, and return the results as IronPython objects
(or raise exceptions as appropriate). All calls and memory accesses -- for all
objects -- are synchronised with a global lock which lives on this class.


Boring classes

PydImporter

Loads a .pyd file and calls its initialisation function. Everything else is taken
care of via API calls.

HGlobalAllocator

Allocates, reallocates and deallocates unmanaged memory. Knows what pointers
it's responsible for. Not exciting.

CPyMarshal

Static utility class which simplifies reading and writing all sorts of unmanaged
data. Nothing to see here, move along.

MagicMethods

Hardcoded method name mappings.

StupidSet

Essentially, a Dictionary<object, string> whose values are always "stupid"; much
like a python set, but capable of holding unhashable objects. Not very
interesting but used in several places.

InappropriateReflection

Static utility class for messing with other class' privates. Yes, I'm ashamed.


Other things

Python25Structs.cs contains memory layouts for various CPython objects, and
defines several delegate types. I fear the day when we have to deal with 64-bit
machines; I wish C# had typedef. This concern also applies to all the function
signatures in Python25Api.



