
Overview

Ironclad's purpose is to allow IronPython to transparently import and use
compiled CPython extensions. Currently, it only works on 32-bit Windows,
although we are trying to avoid using too much platform-specific code: we
would very much like to make Ironclad work on Mono as well. It contains
two major components:

* A stub library which impersonates CPython, autogenerated from (1) the
compiled Python library and (2) various snippets of C code located in the
'stub' directory;

* A CLR assembly which loads and initialises the stub, so that subsequent
CPython API calls are intercepted and handled by managed code (which will
generally affect the state of an IronPython engine). The vast majority of
the work is done by Python25Mapper, a vast and monolithic subclass of the
autogenerated Python25Api class.


Status

* It is possible to import the Python 2.5 bz2 module; all its functions, 
types, and strings are accessible from IronPython. See 'functionalitytest.py' 
(all of which should pass) for examples.

* It is possible to import numpy without errors, and to use quite a lot of it;
a few dependencies are stubbed out, but the majority of tests in the core,
fft, lib, linalg, ma, oldnumeric and random subpackages should pass.

* With some stubbing-out, scipy 0.7 and matplotlib 0.98 will import without
errors, and parts of them can be used; we have yet to enumerate precisely what 
works and what doesn't. Parts of them are desperately slow, but we don't yet 
know how important those bits are. Feedback would be greatly appreciated.

* More than half the .pyds shipped with Python25 import without errors;
cElementTree appears to work, and winsound.MessageBeep works, but we haven't 
tested any of them extensively.

* Is is not possible to use more than one StubReference in a given process,
and we see no way around this limitation; since modules can be shared between
PythonEngine instances, this should not present insurmountable problems, but
should be borne in mind.


Next steps

* 64-bit support
* Mono support
* Find out which broken parts of numpy, scipy, and matplotlib are "important".
* Fix them.
* Find out what other extensions people are interested in (please let us know!):
** h5py?
** tables?
** arcgisscripting?
