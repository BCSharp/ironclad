

Overview

Ironclad's purpose is to allow IronPython to transparently import and use compiled CPython extensions. Currently, it only works on 32-bit Windows, although we are trying to avoid using too much platform-specific code: we would very much like to make Ironclad work on Mono as well. It contains two major components:

* A stub library which impersonates CPython, autogenerated from (1) the compiled Python library and (2) various snippets of C code located in the 'stub' directory;

* A CLR assembly which loads and initialises the stub, so that subsequent CPython API calls are intercepted and handled by managed code (which will generally affect the state of an IronPython engine). The vast majority of the work is done by Python25Mapper, a vast and monolithic subclass of the autogenerated PythonMapper class.


Status

* Once bz2.pyd has been loaded, it is possible to import the Python 2.5 'bz2' module; all its functions, types, and strings are accessible from IronPython. See 'functionalitytest.py' (all of which should pass) for examples.

* It may be possible to import some other CPython extensions without crashing.

* If you're exceptionally lucky, it may be possible to actually use parts of other CPython extensions.

* Is is not possible to use more than one StubReference in a given process, and we see no way around this limitation; since modules can be shared between PythonEngine instances, this should not present insurmountable problems, but should be borne in mind.


Immediate next steps

* Implement whatever else we need to allow us to run 'testbz2.py' and have it all pass.

* Add __del__ methods to CPython types.

* Move these notes into something resembling a real issue tracking system.


For the future

* Start work on numpy.


Notable bugs/issues/deficiencies

* Changes to Lists made by managed code will not normally be visible to unmanaged code; *most* changes made by unmanaged code will be visible in managed code. This is perfectly fixable, but hard to do with decent performance, so we're ignoring the issue for now.

* Lists use perhaps the stupidest allocation strategy known to mankind.

* Python25Mapper.Store(BigInteger) contains an ugly hack.

* Python25Mapper.PyFile_AsFile uses reflection to access a PythonFile's stream.

* Python25Mapper.GetPythonContext uses reflection to access a ScriptEngine's language context.

* Members and properties on types are not yet handled.